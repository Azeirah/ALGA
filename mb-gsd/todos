High-level goals to get a decent grade

[x] Generate graph
    [x] Implement depth-first search
    [x] Make the graph copyable
    [x] Cut a preset number of edges from the graph, leave an edge alone if it's a bridge.
        dfs can be used to determine whether an edge is a bridge or not
[x] Implement grenade
    [x] Implement Minimum-spanning tree (prim or kruskal)
        = Implemented Kruskal's
    [x] Detect when grenade cannot be used, that is when the dungeon already IS an mst
        = Implemented isMST(graph) function
    [x] Add grenade command
    [x] Squiggles! ~~~~
[x] Implement talisman
    [x] Implement Breadth-first search
    [x] Count layers
        = Implemented shortestPath(graph, start, goal)
    [x] Add talisman command
        [x] Add player position to dungeon
            = added to map
        [x] Add staircase to dungeon
            = added to map
[ ] Implement Dijkstra's (using visitor pattern)
[ ] Make game interactive
    [x] Decorate map to look like a game
    [ ] Make game class and add inputs for
        [x] talisman
        [x] graph
        [ ] player movement
            [ ] could be improved by restricting movement
